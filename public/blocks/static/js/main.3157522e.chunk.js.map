{"version":3,"sources":["types/Service.tsx","types/IBlock.tsx","types/Game.tsx","services/GameService.tsx","components/Block.tsx","containers/GameContainer.tsx","App.tsx","index.tsx"],"names":["Request","State","selectElement","game","index","selectedIndex","blocks","oldIndex","newIndex","firstElement","clone","move","moved","checkGame","completed","map","element","key","activePosition","state","originPosition","BLOCKED","ACTIVE","sumBy","length","usePostGameService","id","useState","status","INIT","result","setResult","useEffect","fetch","replace","then","response","json","LOADED","payload","catch","error","ERROR","useStyles","makeStyles","theme","createStyles","selected","margin","border","textAlign","width","height","cursor","backgroundSize","filter","color","background","fontWeight","correct","Block","block","fnClick","classes","Grid","item","xs","image","className","style","getClassName","backgroundImage","onClick","GameContainer","container","direction","justify","alignItems","spacing","root","Array","from","keys","usedElements","gameObj","name","sortBy","getFreePosition","number","random","includes","push","App","setGame","service","get","window","LOADING","newGame","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3157522e.chunk.js","sourcesContent":["export enum Request{\n    INIT,\n    LOADING,\n    LOADED,\n    ERROR\n}\ninterface ServiceInit {\n    status: Request.INIT\n}\ninterface ServiceLoading {\n    status: Request.LOADING\n}\ninterface ServiceLoaded<T> {\n    status: Request.LOADED\n    payload: T;\n}\ninterface ServiceError {\n    status: Request.ERROR\n    error: Error;\n}\nexport type Service<T> =\n    | ServiceInit\n    | ServiceLoading\n    | ServiceLoaded<T>\n    | ServiceError;","export enum State{\n    ACTIVE,\n    BLOCKED\n}\nexport interface IBlock {\n    readonly image: string;\n    activePosition: number;\n    readonly originPosition: number;\n    state?: State\n};\n\n","import {IBlock, State} from \"./IBlock\";\nimport {clone, sumBy} from 'lodash';\n\nexport interface Game {\n    readonly id: number,\n    readonly name: string;\n    selectedIndex: number | null;\n    blocks: IBlock[];\n    completed?: boolean;\n    moved?: number;\n    shareUrl?: string;\n}\n\nconst move = (blocks: IBlock[], oldIndex: number, newIndex: number): IBlock[] => {\n    const firstElement = clone(blocks[oldIndex]);\n    blocks[oldIndex] = clone(blocks[newIndex]);\n    blocks[newIndex] = firstElement;\n    return blocks;\n};\n\nexport const selectElement = (game: Game, index: number): Game => {\n    let {selectedIndex, blocks} = game;\n    if (selectedIndex != null && selectedIndex !== index) {\n        blocks = move(blocks, selectedIndex, index);\n        game.moved =(game.moved ? game.moved : 0) + 1;\n        game = checkGame({...game, blocks});\n        selectedIndex = null;\n    } else {\n        selectedIndex = index;\n    }\n    return {...game, selectedIndex};\n};\n\nexport function checkGame(game: Game): Game {\n    let {blocks, completed} = game;\n    blocks = blocks.map((element: IBlock, key: number): IBlock => {\n        element.activePosition = key;\n        element.state = element.activePosition === element.originPosition ? State.BLOCKED : State.ACTIVE;\n        return element;\n    });\n    const checked = sumBy(blocks, (element: IBlock): number => {\n        return element && element.state === State.BLOCKED ? 1 : 0\n    });\n    completed = checked === blocks.length;\n    return {...game, blocks, completed}\n}","import {useEffect, useState} from 'react';\nimport {Request, Service} from '../types/Service';\nimport {checkGame, Game} from \"../types/Game\";\n\nconst API_URL = 'https://hiwarsaw.herokuapp.com/api-place/:id';\nconst usePostGameService = (id: number) => {\n    const [result, setResult] = useState<Service<Game>>({\n        status: Request.INIT\n    });\n\n    useEffect(() => {\n        fetch(API_URL.replace(\":id\", `${id}`))\n            .then(response => response.json())\n            .then(response => setResult({status: Request.LOADED, payload: checkGame(response)}))\n            .catch(error => setResult({status: Request.ERROR, error}));\n    }, [id]);\n\n    return result;\n};\n\nexport default usePostGameService;","import React from 'react';\nimport {createStyles, Grid, makeStyles, Theme} from \"@material-ui/core\";\nimport {IBlock, State} from \"../types/IBlock\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        selected: {\n            margin: \"2px\",\n            border: '1px solid #ff0000',\n            textAlign: 'center',\n            width: \"15vw\",\n            height: \"15vw\",\n            cursor: \"pointer\",\n            backgroundSize: \"cover\",\n            filter: 'grayscale(100%)',\n            color: \"#fff\"\n        },\n        element: {\n            margin: \"2px\",\n            background: \"#e3e3e3\",\n            textAlign: 'center',\n            width: \"15vw\",\n            height: \"15vw\",\n            cursor: \"pointer\",\n            backgroundSize: \"cover\",\n            filter: 'grayscale(100%)',\n            color: \"#fff\",\n            fontWeight: \"bolder\"\n        },\n        correct: {\n            margin: \"2px\",\n            textAlign: 'center',\n            width: \"15vw\",\n            height: \"15vw\",\n            cursor: \"no-drop\",\n            backgroundSize: \"cover\",\n        }\n    }),\n);\n\ninterface CardProps {\n    block: IBlock;\n    selected?: number | null;\n    fnClick: (_: IBlock) => void;\n}\n\nconst Block: React.FC<CardProps> = ({block, selected, fnClick}) => {\n    const classes = useStyles();\n    const getClassName = () => {\n        let style = classes.element;\n        if (block.activePosition === selected) {\n            style = classes.selected;\n        }\n        if (block.state === State.BLOCKED) {\n            style = classes.correct;\n        }\n        return style;\n    };\n\n    return (\n        <Grid item xs={2} key={block.image}\n              className={getClassName()}\n              style={{backgroundImage: `url('http://localhost:3000/test.jpg')`}}\n              onClick={() => fnClick(block)}>\n            {block.activePosition} - {block.originPosition}\n        </Grid>\n    );\n};\n\nexport default Block;\n","import * as React from \"react\";\nimport {Game} from \"../types/Game\";\nimport {IBlock} from \"../types/IBlock\";\nimport Block from \"../components/Block\";\nimport {Grid} from \"@material-ui/core\";\nimport \"../App.css\";\n\ninterface GameContainerProps {\n    game: Game,\n    fnClick: (_: IBlock) => void,\n}\n\nconst GameContainer: React.FC<GameContainerProps> = ({game, fnClick}) => {\n    const {blocks} = game;\n\n    const fbShare = (e: MouseEvent): void => {\n        e.preventDefault();\n        window.open(`https://www.facebook.com/sharer/sharer.php?u=${window.location.href}`, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');\n    };\n\n    return (\n        <React.Fragment>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={1}\n            >\n                {blocks.map((block: IBlock) => {\n                    return (\n                        <Block key={block.image} block={block} selected={game.selectedIndex} fnClick={fnClick}/>\n                    );\n                })}\n\n            </Grid>\n            {game.completed && <span>\n                Gratulacje udało Ci się ułożyć miejsce, możesz podzielić się tym\n\n            </span>}\n            <div>Ilość ruchów: {game.moved}</div>\n\n        </React.Fragment>\n    )\n};\n\nexport default GameContainer;","import React, {useState} from 'react';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\nimport usePostGameService from \"./services/GameService\";\nimport {Request} from \"./types/Service\";\nimport {IBlock, State} from \"./types/IBlock\";\nimport {get, random, sortBy} from \"lodash\";\nimport {checkGame, Game, selectElement} from \"./types/Game\";\nimport GameContainer from \"./containers/GameContainer\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            // flexGrow: 1,\n        }\n    }),\n);\n\nlet elements = Array.from(Array(50).keys());\nconst blocks: IBlock[] = elements.map((element: number): IBlock => {\n    return {\n        image: `${element}.jpg`,\n        originPosition: element,\n        activePosition: element,\n        state: State.ACTIVE\n    }\n});\nlet usedElements: number[] = [];\nconst getFreePosition = () => {\n    let number = random(0, blocks.length-1);\n    if (!usedElements.includes(number)) {\n        usedElements.push(number);\n    } else {\n        number = getFreePosition();\n    }\n    return number;\n};\nconst gameObj: Game = {\n    selectedIndex: null,\n    id: 1,\n    name: 'Pałac kultury',\n    moved: 0,\n    blocks: sortBy(blocks.map((block: IBlock): IBlock => {\n        block.activePosition = getFreePosition();\n        return block;\n    }), 'activePosition')\n};\n\n\nconst App: React.FC = () => {\n    const [game, setGame] = useState<Game>(checkGame(gameObj));\n    const service = usePostGameService(get(window, 'hwPlaceId', null));\n    const classes = useStyles();\n    const select = (block: IBlock): void => {\n        if (block.state === State.BLOCKED) {\n            alert(\"Element in correct place\");\n            return;\n        }\n        let newGame = selectElement(game, block.activePosition);\n        setGame(newGame);\n    };\n\n    return (\n        <div className={classes.root}>\n            {service.status === Request.LOADING && <div>Loading...</div>}\n            {service.status === Request.LOADED &&\n            service.payload.blocks.map(block => (\n                <div key={block.originPosition}>{block.originPosition}</div>\n            ))}\n            {service.status === Request.ERROR && (\n                <div>Error, the backend moved to the dark side.</div>\n            )}\n            <GameContainer game={game} fnClick={select}/>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}