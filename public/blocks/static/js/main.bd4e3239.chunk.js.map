{"version":3,"sources":["types/Service.tsx","types/IBlock.tsx","types/Game.tsx","services/GameService.tsx","components/Block.tsx","containers/GameContainer.tsx","App.tsx","index.tsx"],"names":["Request","State","selectElement","game","index","selectedIndex","blocks","oldIndex","newIndex","firstElement","clone","move","moved","checkGame","completed","map","element","key","activePosition","state","originPosition","BLOCKED","ACTIVE","sumBy","length","usePostGameService","id","useState","status","INIT","result","setResult","useEffect","fetch","replace","mode","headers","then","response","json","LOADED","payload","catch","error","ERROR","useStyles","makeStyles","theme","createStyles","selected","margin","border","textAlign","width","height","cursor","backgroundSize","filter","color","background","fontWeight","correct","Block","block","fnClick","classes","Grid","item","xs","image","className","style","getClassName","backgroundImage","onClick","GameContainer","undefined","container","direction","justify","alignItems","spacing","root","App","setGame","service","get","window","LOADING","newGame","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd4e3239.chunk.js","sourcesContent":["export enum Request{\n    INIT,\n    LOADING,\n    LOADED,\n    ERROR\n}\ninterface ServiceInit {\n    status: Request.INIT\n}\ninterface ServiceLoading {\n    status: Request.LOADING\n}\ninterface ServiceLoaded<T> {\n    status: Request.LOADED\n    payload: T;\n}\ninterface ServiceError {\n    status: Request.ERROR\n    error: Error;\n}\nexport type Service<T> =\n    | ServiceInit\n    | ServiceLoading\n    | ServiceLoaded<T>\n    | ServiceError;","export enum State{\n    ACTIVE,\n    BLOCKED\n}\nexport interface IBlock {\n    readonly image: string;\n    activePosition: number;\n    readonly originPosition: number;\n    state?: State\n};\n\n","import {IBlock, State} from \"./IBlock\";\nimport {clone, sumBy} from 'lodash';\n\nexport interface Game {\n    readonly id: number,\n    readonly name: string;\n    selectedIndex: number | null;\n    blocks: IBlock[];\n    completed?: boolean;\n    moved?: number;\n    shareUrl?: string;\n}\n\nconst move = (blocks: IBlock[], oldIndex: number, newIndex: number): IBlock[] => {\n    const firstElement = clone(blocks[oldIndex]);\n    blocks[oldIndex] = clone(blocks[newIndex]);\n    blocks[newIndex] = firstElement;\n    return blocks;\n};\n\nexport const selectElement = (game: Game, index: number): Game => {\n    let {selectedIndex, blocks} = game;\n    if (selectedIndex != null && selectedIndex !== index) {\n        blocks = move(blocks, selectedIndex, index);\n        game.moved =(game.moved ? game.moved : 0) + 1;\n        game = checkGame({...game, blocks});\n        selectedIndex = null;\n    } else {\n        selectedIndex = index;\n    }\n    return {...game, selectedIndex};\n};\n\nexport function checkGame(game: Game): Game {\n    let {blocks, completed} = game;\n    blocks = blocks.map((element: IBlock, key: number): IBlock => {\n        element.activePosition = key;\n        element.state = element.activePosition === element.originPosition ? State.BLOCKED : State.ACTIVE;\n        return element;\n    });\n    const checked = sumBy(blocks, (element: IBlock): number => {\n        return element && element.state === State.BLOCKED ? 1 : 0\n    });\n    completed = checked === blocks.length;\n    return {...game, blocks, completed}\n}","import {useEffect, useState} from 'react';\nimport {Request, Service} from '../types/Service';\nimport {checkGame, Game} from \"../types/Game\";\n\nconst API_URL = 'https://hiwarsaw.herokuapp.com/api-place/:id';\nconst usePostGameService = (id: number) => {\n    const [result, setResult] = useState<Service<Game>>({\n        status: Request.INIT\n    });\n\n    useEffect(() => {\n        fetch(API_URL.replace(\":id\", `${id}`), {\n            mode: 'cors',\n            headers: {\n                'Access-Control-Allow-Origin': '*'\n            }\n        })\n            .then(response => response.json())\n            .then(response => setResult({status: Request.LOADED, payload: checkGame(response)}))\n            .catch(error => setResult({status: Request.ERROR, error}));\n    }, [id]);\n\n    return result;\n};\n\nexport default usePostGameService;","import React from 'react';\nimport {createStyles, Grid, makeStyles, Theme} from \"@material-ui/core\";\nimport {IBlock, State} from \"../types/IBlock\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        selected: {\n            margin: \"2px\",\n            border: '2px solid #ff0000',\n            textAlign: 'center',\n            width: \"15vw\",\n            height: \"15vw\",\n            cursor: \"pointer\",\n            backgroundSize: \"cover\",\n            filter: 'grayscale(100%)',\n            color: \"#fff\"\n        },\n        element: {\n            margin: \"3px\",\n            background: \"#e3e3e3\",\n            textAlign: 'center',\n            width: \"15vw\",\n            height: \"15vw\",\n            cursor: \"pointer\",\n            backgroundSize: \"cover\",\n            filter: 'grayscale(100%)',\n            color: \"#fff\",\n            fontWeight: \"bolder\"\n        },\n        correct: {\n            margin: \"2px\",\n            textAlign: 'center',\n            width: \"15vw\",\n            height: \"15vw\",\n            cursor: \"no-drop\",\n            backgroundSize: \"cover\",\n        }\n    }),\n);\n\ninterface CardProps {\n    block: IBlock;\n    selected?: number | null;\n    fnClick: (_: IBlock) => void;\n}\n\nconst Block: React.FC<CardProps> = ({block, selected, fnClick}) => {\n    const classes = useStyles();\n    const getClassName = () => {\n        let style = classes.element;\n        if (block.activePosition === selected) {\n            style = classes.selected;\n        }\n        if (block.state === State.BLOCKED) {\n            style = classes.correct;\n        }\n        return style;\n    };\n\n    return (\n        <Grid item xs={2} key={block.image}\n              className={getClassName()}\n              style={{backgroundImage: `url(https://hiwarsaw.herokuapp.com${block.image}`}}\n              onClick={() => fnClick(block)}>\n            {block.activePosition} - {block.originPosition}\n        </Grid>\n    );\n};\n\nexport default Block;\n","import * as React from \"react\";\nimport {Game} from \"../types/Game\";\nimport {IBlock} from \"../types/IBlock\";\nimport Block from \"../components/Block\";\nimport {Grid} from \"@material-ui/core\";\nimport \"../App.css\";\n\ninterface GameContainerProps {\n    game: Game|undefined,\n    fnClick: (_: IBlock) => void,\n}\n\nconst GameContainer: React.FC<GameContainerProps> = ({game, fnClick}) => {\n    if(game === undefined){\n        return(\n            <span/>\n        )\n    }\n    const {blocks} = game;\n\n    return (\n        <React.Fragment>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={1}\n            >\n                {blocks.map((block: IBlock) => {\n                    return (\n                        <Block key={block.image} block={block} selected={game.selectedIndex} fnClick={fnClick}/>\n                    );\n                })}\n\n            </Grid>\n            {game.completed && <span>\n                Gratulacje udało Ci się ułożyć miejsce, możesz podzielić się tym\n\n            </span>}\n            <div>Ilość ruchów: {game.moved}</div>\n\n        </React.Fragment>\n    )\n};\n\nexport default GameContainer;","import React, {useEffect, useState} from 'react';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\n\nimport usePostGameService from \"./services/GameService\";\nimport {Request} from \"./types/Service\";\nimport {IBlock, State} from \"./types/IBlock\";\nimport {get} from \"lodash\";\nimport {Game, selectElement} from \"./types/Game\";\nimport GameContainer from \"./containers/GameContainer\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            // flexGrow: 1,\n        }\n    }),\n);\n\nconst App: React.FC = () => {\n    const [game, setGame] = useState<Game>();\n    const service = usePostGameService(get(window, 'hwPlaceId', null));\n    const classes = useStyles();\n    const select = (block: IBlock): void => {\n        if (!game) {\n            return;\n        }\n        if (block.state === State.BLOCKED) {\n            alert(\"Element in correct place\");\n            return;\n        }\n        let newGame = selectElement(game, block.activePosition);\n        setGame(newGame);\n    };\n    useEffect(() => {\n        if(service.status === Request.LOADED){\n            setGame(service.payload);\n        }\n    }, [service]);\n\n    return (\n        <div className={classes.root}>\n            {service.status === Request.LOADING && <div>Loading...</div>}\n            {service.status === Request.LOADED && <GameContainer game={game} fnClick={select}/>}\n            {service.status === Request.ERROR && (\n                <div>Error, the backend moved to the dark side.</div>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}